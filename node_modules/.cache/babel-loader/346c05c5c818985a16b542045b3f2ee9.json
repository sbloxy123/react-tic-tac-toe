{"ast":null,"code":"var _jsxFileName = \"/Users/stuartbloxham/Code./interviews/interview-test-master/app-standalone/src/App/components/Board/index.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Square from \"../Square\";\n/**\n * A board for the game of tic-tac-toe.  A 3x3 square.\n */\n\nconst Board = ({\n  onClick,\n  squares,\n  winningLine\n}) => {\n  const renderSquare = i => {\n    winningLine ? winningLine.map(num => {\n      if (num === i) {\n        return /*#__PURE__*/React.createElement(Square, {\n          value: squares[i],\n          onClick: () => onClick(i),\n          winningNumber: \"winning-square\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 13\n          }\n        });\n      }\n    }) : /*#__PURE__*/React.createElement(Square, {\n      value: squares[i],\n      onClick: () => onClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, renderSquare(0), renderSquare(1), renderSquare(2)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, renderSquare(3), renderSquare(4), renderSquare(5)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, renderSquare(6), renderSquare(7), renderSquare(8)));\n};\n\nBoard.propTypes = {\n  /**\n   *  The 1..9 array of squares to display\n   */\n  squares: PropTypes.array.isRequired,\n\n  /**\n   *  The handler for when a square is clicked\n   */\n  onClick: PropTypes.func\n};\nexport default Board;","map":{"version":3,"sources":["/Users/stuartbloxham/Code./interviews/interview-test-master/app-standalone/src/App/components/Board/index.js"],"names":["React","PropTypes","Square","Board","onClick","squares","winningLine","renderSquare","i","map","num","propTypes","array","isRequired","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,MAAP,MAAmB,WAAnB;AAEA;;;;AAGA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,OAAX;AAAoBC,EAAAA;AAApB,CAAD,KAAuC;AACnD,QAAMC,YAAY,GAAIC,CAAD,IAAO;AAC1BF,IAAAA,WAAW,GACTA,WAAW,CAACG,GAAZ,CAAiBC,GAAD,IAAS;AACvB,UAAIA,GAAG,KAAKF,CAAZ,EAAe;AACb,4BACE,oBAAC,MAAD;AACE,UAAA,KAAK,EAAEH,OAAO,CAACG,CAAD,CADhB;AAEE,UAAA,OAAO,EAAE,MAAMJ,OAAO,CAACI,CAAD,CAFxB;AAGE,UAAA,aAAa,EAAC,gBAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;AACF,KAVD,CADS,gBAaT,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAEH,OAAO,CAACG,CAAD,CAAtB;AAA2B,MAAA,OAAO,EAAE,MAAMJ,OAAO,CAACI,CAAD,CAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF;AAeD,GAhBD;;AAkBA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,YAAY,CAAC,CAAD,CADf,EAEGA,YAAY,CAAC,CAAD,CAFf,EAGGA,YAAY,CAAC,CAAD,CAHf,CADF,eAME;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,YAAY,CAAC,CAAD,CADf,EAEGA,YAAY,CAAC,CAAD,CAFf,EAGGA,YAAY,CAAC,CAAD,CAHf,CANF,eAWE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,YAAY,CAAC,CAAD,CADf,EAEGA,YAAY,CAAC,CAAD,CAFf,EAGGA,YAAY,CAAC,CAAD,CAHf,CAXF,CADF;AAmBD,CAtCD;;AAwCAJ,KAAK,CAACQ,SAAN,GAAkB;AAChB;;;AAGAN,EAAAA,OAAO,EAAEJ,SAAS,CAACW,KAAV,CAAgBC,UAJT;;AAMhB;;;AAGAT,EAAAA,OAAO,EAAEH,SAAS,CAACa;AATH,CAAlB;AAYA,eAAeX,KAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Square from \"../Square\";\n\n/**\n * A board for the game of tic-tac-toe.  A 3x3 square.\n */\nconst Board = ({ onClick, squares, winningLine }) => {\n  const renderSquare = (i) => {\n    winningLine ? (\n      winningLine.map((num) => {\n        if (num === i) {\n          return (\n            <Square\n              value={squares[i]}\n              onClick={() => onClick(i)}\n              winningNumber=\"winning-square\"\n            />\n          );\n        }\n      })\n    ) : (\n      <Square value={squares[i]} onClick={() => onClick(i)} />\n    );\n  };\n\n  return (\n    <div>\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  );\n};\n\nBoard.propTypes = {\n  /**\n   *  The 1..9 array of squares to display\n   */\n  squares: PropTypes.array.isRequired,\n\n  /**\n   *  The handler for when a square is clicked\n   */\n  onClick: PropTypes.func,\n};\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}